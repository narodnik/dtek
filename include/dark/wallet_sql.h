// generated by /home/kk/src/sqlcipher/sqlpp11/scripts/ddl2cpp wallet.sql include/dark/wallet_sql dark
#ifndef DARK_WALLET_SQL_H
#define DARK_WALLET_SQL_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace dark
{
  namespace WalletTable_
  {
    struct Idx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "idx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T idx;
            T& operator()() { return idx; }
            const T& operator()() const { return idx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct PublicPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "public_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T publicPoint;
            T& operator()() { return publicPoint; }
            const T& operator()() const { return publicPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PrivateKey
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "private_key";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T privateKey;
            T& operator()() { return privateKey; }
            const T& operator()() const { return privateKey; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace WalletTable_

  struct WalletTable: sqlpp::table_t<WalletTable,
               WalletTable_::Idx,
               WalletTable_::PublicPoint,
               WalletTable_::PrivateKey,
               WalletTable_::Value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "wallet_table";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T walletTable;
        T& operator()() { return walletTable; }
        const T& operator()() const { return walletTable; }
      };
    };
  };
} // namespace dark
#endif
